#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "struct.h"
MusicalComposition* createMusicalComposition(char* name, char* author, int year){
	MusicalComposition* head = (MusicalComposition*)malloc(sizeof(MusicalComposition));
	strcpy(head->name, name);
	strcpy(head->author, author);
	head->year = year;
	head->prior=NULL;
	head->next=NULL;
	return head;
}
//создание списка
MusicalComposition* createMusicalCompositionList(char** array_names,char** array_authors, int* array_years, int n){
	MusicalComposition* tmp = createMusicalComposition(array_names[0], array_authors[0], array_years[0]);
	MusicalComposition* head = tmp;
	int i;
	for (i=1; i<n; i++){
		tmp->next = createMusicalComposition(array_names[i], array_authors[i], array_years[i]);
		tmp->next->prior = tmp;
		tmp = tmp->next;
	}
	return head;
}
//вставка элемента в конец списка
void push(MusicalComposition* head, MusicalComposition* element){
	while(head->next){
	head=head->next;
	}
	head->next=element;
	element->prior=head;
}
////удаление определенного элемента
void removeEl(MusicalComposition* head, char* name_for_remove){
	MusicalComposition *tmp = head;
	while (tmp->next){
		if (strcmp(tmp->name, name_for_remove) == 0) {
			if ((tmp->prior) == NULL){
				MusicalComposition *ntmp = tmp->next;
				strcpy(tmp->name, ntmp->name);
				strcpy(tmp->author, ntmp->author);
				tmp->year = ntmp->year;
				ntmp->next->prior = tmp;
				tmp->next = ntmp->next;
				free(ntmp);
			}
			else{
				tmp->prior->next = tmp->next;
				tmp->next->prior = tmp->prior;
				free(tmp);
			}
		}
		tmp = tmp->next;
	}
	if ((strcmp(tmp->name, name_for_remove) == 0) && (tmp->next == NULL)){
		tmp->prior->next = NULL;
		free(tmp);
	}

}
//кол-во элементов
int count(MusicalComposition* head){
	int count=0;
	while (head){
		count++;
		head=head->next;
		}
	return count;
}
//вывод имен
void print_names(MusicalComposition* head){
	MusicalComposition *tmp = head;
	while (tmp->next){
		printf("%s\n", tmp->name);
		tmp = tmp->next;
	}
	printf("%s\n", tmp->name);
}
//вывод списка
void print_list(MusicalComposition* head){
        while (head->next){
                printf("%s ", head->name);
		printf("%s ", head->author);
		printf("%d\n", head->year);
                head = head->next;
        }
        printf("%s ", head->name);
        printf("%s ", head->author);
        printf("%d\n", head->year);
}
//разделение списка на две части и вставка в середину первой части
MusicalComposition* ChangeList(MusicalComposition* head){
      MusicalComposition* current = head;
        int l = count(head);
        int i;
        float n;
        if (l%2==0) n=l/2;
        else n=l/2+0.5;
        MusicalComposition* tmp = (MusicalComposition*)malloc(sizeof(MusicalComposition));
        MusicalComposition* curr = tmp;
        for (i=0; i<n; i++){
                strcpy(tmp->name, head->name);
                strcpy(tmp->author, head->author);
                tmp->year = head->year;
                head=head->next;
                tmp=tmp->next;
                }
        MusicalComposition* rubb = head;
        head = curr;
        tmp = rubb;
        return current;
}
//поменять местами элементы
void exchange(MusicalComposition* a, MusicalComposition* b){
	char rubbish[80];
	int rubb;
	strcpy(rubbish, a->name);
	strcpy(a->name, b->name);
	strcpy (b->name, rubbish);
	strcpy(rubbish, a->author);
	strcpy(a->author, b->author);
	strcpy (b->author, rubbish);
	rubb=a->year;
	a->year=b->year;
	b->year=rubb;
}
//разбить список на группы и поменять в нем начальный и конечный элементы местами
MusicalComposition* ChangeList1(MusicalComposition* head, int m){
	int i=0; 
	int j=0;
	int n=count(head);
	MusicalComposition** arr = (MusicalComposition**)malloc((n+1)*sizeof(MusicalComposition*));
        for (i = 0; i<n; i++) arr[i] = (MusicalComposition*)malloc(sizeof(MusicalComposition*));
        for (i = 0; i<n; i++){
        	arr[i] = head;
        	head = head->next;
        }
	if (n%m==0){
        	for(i = 0; i<n-1; i = i + m){
        		arr[i+m-1]->next = NULL;
        		arr[i]->prior = NULL;
        		exchange(arr[i], arr[i+m-1]);
        	}
        	for (i = 1; i<n-1; i = i + m){
        		arr[i+m-2]->next = arr[i+m-1];
        		arr[i+1]->prior = arr[i];
        	}
	}
	else {
        	for(i = 0; i<n-2; i = i + m){
        		arr[i+m-1]->next = NULL;
        		arr[i]->prior = NULL;
        		exchange(arr[i], arr[i+m-1]);
        	}
        	for (i = 1; i<n-2; i = i + m){
        		arr[i+m-2]->next = arr[i+m-1];
        		arr[i+1]->prior = arr[i];
        	}
		i=n-2;
		arr[i+1]->next=NULL;
		arr[i+1]->prior=arr[i];
       }

	head = arr[0];
	return head;
}

//разбить список на две части относительно индекса n, вторую часть разбить группы по m элементов, поменять в каждой начальный и конечный элемент местами, соединить обратно
MusicalComposition* ChangeList2(MusicalComposition* head, int n, int m){
	MusicalComposition *tmp = head;
	int j;
	for(j=0;j<(n-1);j++) tmp=tmp->next;
	MusicalComposition *curr=tmp->next;
	tmp->next=NULL;
	ChangeList1(curr, m);
	tmp->next=curr;
	return head;
}

